# nul rule cofig

hindsight:
{
  match:
  {
    # possible rules: 
    # none - no position rule (default)
    # offs - offset rule
    # dept - depth rule
    # dist - distance rule
    # with - within rule
    # ofde - offset + depth rule
    # diwi - distance + within rule
    #rule = "none";
    rule = "offs";
    #rule = "ofde";
    #rule = "diwi"
    #rule = "dept"
    #rule = "with"

    filter = { type = "none"; };
  };

  eval:
  {
    # threshold on when to use penalty [0.0, 1.0)
    threshold = 0.1;

    # conversion of match results
    convert = { type = "SSPN"; args = [true, true, true, true]; };

    # penalty for weak match
    penalty = { type = "none" };

    second_crit = { type = "length"; max = 100 };
    #second_crit = { type = "none"; max = 10000 };
    scalar_func = { type = "linear"; rate = 0.99; };
  };

  chrom:
  {
    content:
    {
      token:
      {
        mut = [-4, 4]
      };

      attr:
      {
        arr = ({ range = [0, 1000];
                 mut = [-1, 2];
               },
               { range = [0, 500];
                 mut = [-1, 2];
               }
              );
        mut = 0.5;
        #mut = "all";
      };

      mut = 0.5;
      #mut = "all";
    };

    size = [3, 10];

    mut_rate = 0.5
    mut =
    (
      ({type = "rate"; rate = 0.1}, 0.3),
      ({type = "number"; number = 3}, 0.2),
      ({type = "shift"}, 0.1),
      ({type = "add"}, 0.2),
      ({type = "delete"}, 0.2)
    );

    cross_rate = 0.5
    cross =
    (
      ({type = "1pt_cross";}, 0.5),
      ({type = "Npt_cross"; number = 2}, 0.3),
      ({type = "uni_exch"; rate = 0.2}, 0.2)
    );

  };

};
